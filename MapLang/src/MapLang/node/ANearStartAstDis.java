/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class ANearStartAstDis extends PAstDis
{
    private TNearstart _nearstart_;

    public ANearStartAstDis()
    {
        // Constructor
    }

    public ANearStartAstDis(
        @SuppressWarnings("hiding") TNearstart _nearstart_)
    {
        // Constructor
        setNearstart(_nearstart_);

    }

    @Override
    public Object clone()
    {
        return new ANearStartAstDis(
            cloneNode(this._nearstart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANearStartAstDis(this);
    }

    public TNearstart getNearstart()
    {
        return this._nearstart_;
    }

    public void setNearstart(TNearstart node)
    {
        if(this._nearstart_ != null)
        {
            this._nearstart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nearstart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nearstart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nearstart_ == child)
        {
            this._nearstart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nearstart_ == oldChild)
        {
            setNearstart((TNearstart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
