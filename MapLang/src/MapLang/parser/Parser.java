/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.parser;

import MapLang.lexer.*;
import MapLang.node.*;
import MapLang.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramStart node1 = (PProgramStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ACreateProgramStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ACopyProgramStart */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAddProgramStart */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AProgramStart */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce ACreateMapCreateCreate */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ACreatePointCreateCreate */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ACreateRoomCreateCreate */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ACreateTemplateCreateCreate */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce ACreateShapeCreateCreate */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce ACreateMap */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AIdCreatePoint */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AEqualRelationCreatePoint */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ACreateRoom */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce ACreateTemplate */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ARectCreateShape */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce ACircCreateShape */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce ALineCreateShape */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ARelationRelation */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ACoordinateRelation */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ARelationNullableRelation */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce ANullableRelation */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ACoordinateNullableRelation */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AAprecisedir1PreciseDir */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AAprecisedir2PreciseDir */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce ASecondPreciseDir */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce ARelationExplicit */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce ARightDir */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce ALeftDir */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AUpDir */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce ADownDir */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce ARelRectRectangleRectangle */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AAbsRectRectangleRectangle */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list);
            }
            break;
            case 32: /* reduce ACircleCircle */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce ACopyPointsCCopy */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce ACopyTemplateCCopy */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce ACopyShapeCCopy */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce ACopyPoints */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list);
            }
            break;
            case 37: /* reduce AAmultiid1MultiId */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list);
            }
            break;
            case 38: /* reduce AAmultiid2MultiId */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce AAidlistidlist1IdList */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list);
            }
            break;
            case 40: /* reduce AAidlistidlist2IdList */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce ACopyShape */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce ACopyTemplate */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list);
            }
            break;
            case 43: /* reduce AShapeRoomTemplateAAdd */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list);
            }
            break;
            case 44: /* reduce AAddOpeningAAdd */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list);
            }
            break;
            case 45: /* reduce AAddShapeToShapeAAddHelper */
            {
                ArrayList<Object> list = new45();
                push(goTo(22), list);
            }
            break;
            case 46: /* reduce AAddRoomToRoomAAddHelper */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list);
            }
            break;
            case 47: /* reduce AAddTemplateToTemplateAAddHelper */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce AAddShape */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce AAddTemplate */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list);
            }
            break;
            case 50: /* reduce AAddToRoom */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list);
            }
            break;
            case 51: /* reduce APointsToMultiPointRoomType */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list);
            }
            break;
            case 52: /* reduce AShapeToMultiShapeRoomType */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list);
            }
            break;
            case 53: /* reduce AIdRoomType */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list);
            }
            break;
            case 54: /* reduce AMultiCoordinateRoomType */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list);
            }
            break;
            case 55: /* reduce AAmulticoordinate1MultiCoordinate */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list);
            }
            break;
            case 56: /* reduce AAmulticoordinate2MultiCoordinate */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list);
            }
            break;
            case 57: /* reduce AAcoorlistcoordinatelist1CoordinateList */
            {
                ArrayList<Object> list = new57();
                push(goTo(28), list);
            }
            break;
            case 58: /* reduce AAcoorlistcoordinatelist2CoordinateList */
            {
                ArrayList<Object> list = new58();
                push(goTo(28), list);
            }
            break;
            case 59: /* reduce APointToMultiPointAddShapeGeneric */
            {
                ArrayList<Object> list = new59();
                push(goTo(29), list);
            }
            break;
            case 60: /* reduce AShapeToMultiShapeAddShapeGeneric */
            {
                ArrayList<Object> list = new60();
                push(goTo(29), list);
            }
            break;
            case 61: /* reduce AMultiTemplateAddShapeGeneric */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list);
            }
            break;
            case 62: /* reduce AMultiCoordinateAddShapeGeneric */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list);
            }
            break;
            case 63: /* reduce ADoorwayAddOpening */
            {
                ArrayList<Object> list = new63();
                push(goTo(30), list);
            }
            break;
            case 64: /* reduce AWindowAddOpening */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list);
            }
            break;
            case 65: /* reduce AExitAddOpening */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list);
            }
            break;
            case 66: /* reduce ADistancePosition */
            {
                ArrayList<Object> list = new66();
                push(goTo(31), list);
            }
            break;
            case 67: /* reduce ACoordinatePosition */
            {
                ArrayList<Object> list = new67();
                push(goTo(31), list);
            }
            break;
            case 68: /* reduce AStartDistance */
            {
                ArrayList<Object> list = new68();
                push(goTo(32), list);
            }
            break;
            case 69: /* reduce ANearStartDistance */
            {
                ArrayList<Object> list = new69();
                push(goTo(32), list);
            }
            break;
            case 70: /* reduce AHalfwayDistance */
            {
                ArrayList<Object> list = new70();
                push(goTo(32), list);
            }
            break;
            case 71: /* reduce ANearEndDistance */
            {
                ArrayList<Object> list = new71();
                push(goTo(32), list);
            }
            break;
            case 72: /* reduce AEndDistance */
            {
                ArrayList<Object> list = new72();
                push(goTo(32), list);
            }
            break;
            case 73: /* reduce ACoordinate */
            {
                ArrayList<Object> list = new73();
                push(goTo(33), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ACreateProgramStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PProgramStart pprogramstartNode2;
        PProgramStart pprogramstartNode3;
        pprogramstartNode2 = (PProgramStart)nodeArrayList2.get(0);
        pprogramstartNode3 = (PProgramStart)nodeArrayList4.get(0);

        pprogramstartNode1 = new AInitProgramStart(pprogramstartNode2, pprogramstartNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ACopyProgramStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PProgramStart pprogramstartNode2;
        PProgramStart pprogramstartNode3;
        pprogramstartNode2 = (PProgramStart)nodeArrayList2.get(0);
        pprogramstartNode3 = (PProgramStart)nodeArrayList4.get(0);

        pprogramstartNode1 = new AInitProgramStart(pprogramstartNode2, pprogramstartNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAddProgramStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PProgramStart pprogramstartNode2;
        PProgramStart pprogramstartNode3;
        pprogramstartNode2 = (PProgramStart)nodeArrayList2.get(0);
        pprogramstartNode3 = (PProgramStart)nodeArrayList4.get(0);

        pprogramstartNode1 = new AInitProgramStart(pprogramstartNode2, pprogramstartNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AProgramStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgramStart pprogramstartNode1;
        {
            // Block

        pprogramstartNode1 = new AProgramStart();
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ACreateMapCreateCreate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCreateMap pcreatemapNode2;
        pcreatemapNode2 = (PCreateMap)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACreateMapProgramStart(pcreatemapNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACreatePointCreateCreate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCreatePoint pcreatepointNode2;
        pcreatepointNode2 = (PCreatePoint)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACreatePointProgramStart(pcreatepointNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ACreateRoomCreateCreate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ACreateTemplateCreateCreate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCreateTemplate pcreatetemplateNode2;
        pcreatetemplateNode2 = (PCreateTemplate)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACreateTemplateProgramStart(pcreatetemplateNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACreateShapeCreateCreate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACreateMap */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCreateMap pcreatemapNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pcreatemapNode1 = new ACreateMap(tidNode2);
        }
	nodeList.add(pcreatemapNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIdCreatePoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCreatePoint pcreatepointNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pcreatepointNode1 = new ACreatePointCreatePoint(tidNode2);
        }
	nodeList.add(pcreatepointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEqualRelationCreatePoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCreatePoint pcreatepointNode1;
        {
            // Block
        PAstRelation pastrelationNode2;
        TId tidNode3;
        pastrelationNode2 = (PAstRelation)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);

        pcreatepointNode1 = new ACreatePointExtendedCreatePoint(pastrelationNode2, tidNode3);
        }
	nodeList.add(pcreatepointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACreateRoom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        TInt tintNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tintNode3 = (TInt)nodeArrayList5.get(0);
        tidNode4 = (TId)nodeArrayList7.get(0);

        pprogramstartNode1 = new ACreateRoomProgramStart(tidNode2, tintNode3, tidNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ACreateTemplate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCreateTemplate pcreatetemplateNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pcreatetemplateNode1 = new ACreateTemplate(tidNode2);
        }
	nodeList.add(pcreatetemplateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ARectCreateShape */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList3.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACircCreateShape */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList3.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALineCreateShape */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        PAstCoordinate pastcoordinateNode3;
        TId tidNode4;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList4.get(0);
        pastcoordinateNode3 = (PAstCoordinate)nodeArrayList6.get(0);
        tidNode4 = (TId)nodeArrayList8.get(0);

        pprogramstartNode1 = new ACreateLineProgramStart(pastcoordinateNode2, pastcoordinateNode3, tidNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ARelationRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstRelation pastrelationNode1;
        {
            // Block
        PAstPreciseDir pastprecisedirNode2;
        PAstRelationExplicit pastrelationexplicitNode3;
        pastprecisedirNode2 = (PAstPreciseDir)nodeArrayList1.get(0);
        pastrelationexplicitNode3 = (PAstRelationExplicit)nodeArrayList2.get(0);

        pastrelationNode1 = new ARelationExplicitAstRelation(pastprecisedirNode2, pastrelationexplicitNode3);
        }
	nodeList.add(pastrelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ACoordinateRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstRelation pastrelationNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList1.get(0);

        pastrelationNode1 = new ARelationCoordinateAstRelation(pastcoordinateNode2);
        }
	nodeList.add(pastrelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ARelationNullableRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstNullableRelation pastnullablerelationNode1;
        {
            // Block
        PAstPreciseDir pastprecisedirNode2;
        PAstRelationExplicit pastrelationexplicitNode3;
        pastprecisedirNode2 = (PAstPreciseDir)nodeArrayList1.get(0);
        pastrelationexplicitNode3 = (PAstRelationExplicit)nodeArrayList2.get(0);

        pastnullablerelationNode1 = new AERelationExplicitAstNullableRelation(pastprecisedirNode2, pastrelationexplicitNode3);
        }
	nodeList.add(pastnullablerelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANullableRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstNullableRelation pastnullablerelationNode1;
        {
            // Block
        PAstPreciseDir pastprecisedirNode2;
        pastprecisedirNode2 = (PAstPreciseDir)nodeArrayList1.get(0);

        pastnullablerelationNode1 = new AERelationAstNullableRelation(pastprecisedirNode2);
        }
	nodeList.add(pastnullablerelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ACoordinateNullableRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstNullableRelation pastnullablerelationNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList1.get(0);

        pastnullablerelationNode1 = new AERelationCoordinateAstNullableRelation(pastcoordinateNode2);
        }
	nodeList.add(pastnullablerelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAprecisedir1PreciseDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstPreciseDir pastprecisedirNode1;
        {
            // Block
        TFloat tfloatNode2;
        PAstDir pastdirNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);
        pastdirNode3 = (PAstDir)nodeArrayList2.get(0);

        pastprecisedirNode1 = new AAstPreciseDir(tfloatNode2, pastdirNode3, null);
        }
	nodeList.add(pastprecisedirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAprecisedir2PreciseDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstPreciseDir pastprecisedirNode1;
        {
            // Block
        TFloat tfloatNode2;
        PAstDir pastdirNode3;
        PAstSecondPreciseDir pastsecondprecisedirNode4;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);
        pastdirNode3 = (PAstDir)nodeArrayList2.get(0);
        pastsecondprecisedirNode4 = (PAstSecondPreciseDir)nodeArrayList3.get(0);

        pastprecisedirNode1 = new AAstPreciseDir(tfloatNode2, pastdirNode3, pastsecondprecisedirNode4);
        }
	nodeList.add(pastprecisedirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASecondPreciseDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstSecondPreciseDir pastsecondprecisedirNode1;
        {
            // Block
        TFloat tfloatNode2;
        PAstDir pastdirNode3;
        tfloatNode2 = (TFloat)nodeArrayList2.get(0);
        pastdirNode3 = (PAstDir)nodeArrayList3.get(0);

        pastsecondprecisedirNode1 = new AAstSecondPreciseDir(tfloatNode2, pastdirNode3);
        }
	nodeList.add(pastsecondprecisedirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARelationExplicit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstRelationExplicit pastrelationexplicitNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pastrelationexplicitNode1 = new AAstRelationExplicit(tidNode2);
        }
	nodeList.add(pastrelationexplicitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARightDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDir pastdirNode1;
        {
            // Block
        TRight trightNode2;
        trightNode2 = (TRight)nodeArrayList1.get(0);

        pastdirNode1 = new ARightDirAstDir(trightNode2);
        }
	nodeList.add(pastdirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ALeftDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDir pastdirNode1;
        {
            // Block
        TLeft tleftNode2;
        tleftNode2 = (TLeft)nodeArrayList1.get(0);

        pastdirNode1 = new ALeftDirAstDir(tleftNode2);
        }
	nodeList.add(pastdirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AUpDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDir pastdirNode1;
        {
            // Block
        TUp tupNode2;
        tupNode2 = (TUp)nodeArrayList1.get(0);

        pastdirNode1 = new AUpDirAstDir(tupNode2);
        }
	nodeList.add(pastdirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ADownDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDir pastdirNode1;
        {
            // Block
        TDown tdownNode2;
        tdownNode2 = (TDown)nodeArrayList1.get(0);

        pastdirNode1 = new ADownDirAstDir(tdownNode2);
        }
	nodeList.add(pastdirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ARelRectRectangleRectangle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TFloat tfloatNode2;
        TFloat tfloatNode3;
        PAstRelation pastrelationNode4;
        TId tidNode5;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);
        tfloatNode3 = (TFloat)nodeArrayList3.get(0);
        pastrelationNode4 = (PAstRelation)nodeArrayList5.get(0);
        tidNode5 = (TId)nodeArrayList7.get(0);

        pprogramstartNode1 = new ACreateRectangleOneProgramStart(tfloatNode2, tfloatNode3, pastrelationNode4, tidNode5);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAbsRectRectangleRectangle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        tidNode4 = (TId)nodeArrayList6.get(0);

        pprogramstartNode1 = new ACreateRectangleTwoProgramStart(tidNode2, tidNode3, tidNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ACircleCircle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TFloat tfloatNode2;
        PAstRelation pastrelationNode3;
        TId tidNode4;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);
        pastrelationNode3 = (PAstRelation)nodeArrayList3.get(0);
        tidNode4 = (TId)nodeArrayList5.get(0);

        pprogramstartNode1 = new ACreateCircleProgramStart(tfloatNode2, pastrelationNode3, tidNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ACopyPointsCCopy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCopyPoints pcopypointsNode2;
        pcopypointsNode2 = (PCopyPoints)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACopyPProgramStart(pcopypointsNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACopyTemplateCCopy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCopyTemplate pcopytemplateNode2;
        pcopytemplateNode2 = (PCopyTemplate)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACopyTProgramStart(pcopytemplateNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ACopyShapeCCopy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        PCopyShapes pcopyshapesNode2;
        pcopyshapesNode2 = (PCopyShapes)nodeArrayList2.get(0);

        pprogramstartNode1 = new ACopySProgramStart(pcopyshapesNode2);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ACopyPoints */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCopyPoints pcopypointsNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        PAstNullableRelation pastnullablerelationNode3;
        PAstMultiId pastmultiidNode4;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList3.get(0);
        pastnullablerelationNode3 = (PAstNullableRelation)nodeArrayList6.get(0);
        pastmultiidNode4 = (PAstMultiId)nodeArrayList8.get(0);

        pcopypointsNode1 = new ACopyPoints(pastmultiidNode2, pastnullablerelationNode3, pastmultiidNode4);
        }
	nodeList.add(pcopypointsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAmultiid1MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiId pastmultiidNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pastmultiidNode1 = new AAstMultiId(tidNode2, null);
        }
	nodeList.add(pastmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAmultiid2MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiId pastmultiidNode1;
        {
            // Block
        TId tidNode2;
        PAstMultiId pastmultiidNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pastmultiidNode3 = (PAstMultiId)nodeArrayList2.get(0);

        pastmultiidNode1 = new AAstMultiId(tidNode2, pastmultiidNode3);
        }
	nodeList.add(pastmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAidlistidlist1IdList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiId pastmultiidNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pastmultiidNode1 = new AAstMultiId(tidNode2, null);
        }
	nodeList.add(pastmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAidlistidlist2IdList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiId pastmultiidNode1;
        {
            // Block
        TId tidNode2;
        PAstMultiId pastmultiidNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pastmultiidNode3 = (PAstMultiId)nodeArrayList3.get(0);

        pastmultiidNode1 = new AAstMultiId(tidNode2, pastmultiidNode3);
        }
	nodeList.add(pastmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACopyShape */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCopyShapes pcopyshapesNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        PAstNullableRelation pastnullablerelationNode3;
        PAstMultiId pastmultiidNode4;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList3.get(0);
        pastnullablerelationNode3 = (PAstNullableRelation)nodeArrayList6.get(0);
        pastmultiidNode4 = (PAstMultiId)nodeArrayList8.get(0);

        pcopyshapesNode1 = new ACopyShapes(pastmultiidNode2, pastnullablerelationNode3, pastmultiidNode4);
        }
	nodeList.add(pcopyshapesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ACopyTemplate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCopyTemplate pcopytemplateNode1;
        {
            // Block
        TId tidNode2;
        PAstNullableRelation pastnullablerelationNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pastnullablerelationNode3 = (PAstNullableRelation)nodeArrayList4.get(0);
        tidNode4 = (TId)nodeArrayList6.get(0);

        pcopytemplateNode1 = new ACopyTemplate(tidNode2, pastnullablerelationNode3, tidNode4);
        }
	nodeList.add(pcopytemplateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AShapeRoomTemplateAAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAddOpeningAAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList1.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAddShapeToShapeAAddHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAddRoomToRoomAAddHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAddTemplateToTemplateAAddHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        pprogramstartNode1 = (PProgramStart)nodeArrayList2.get(0);
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAddShape */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PTypeList ptypelistNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypelistNode3 = (PTypeList)nodeArrayList3.get(0);

        pprogramstartNode1 = new AAddToShapeProgramStart(tidNode2, ptypelistNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAddTemplate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PTypeList ptypelistNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypelistNode3 = (PTypeList)nodeArrayList3.get(0);

        pprogramstartNode1 = new AAddToTemplateProgramStart(tidNode2, ptypelistNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAddToRoom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PRoomType proomtypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        proomtypeNode3 = (PRoomType)nodeArrayList3.get(0);

        pprogramstartNode1 = new AAddToRoomProgramStart(tidNode2, proomtypeNode3);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce APointsToMultiPointRoomType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoomType proomtypeNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList2.get(0);

        proomtypeNode1 = new AAddToRoomPointsRoomType(pastmultiidNode2);
        }
	nodeList.add(proomtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AShapeToMultiShapeRoomType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoomType proomtypeNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList2.get(0);

        proomtypeNode1 = new AAddToRoomShapesRoomType(pastmultiidNode2);
        }
	nodeList.add(proomtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AIdRoomType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoomType proomtypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        proomtypeNode1 = new AAddToRoomIdRoomType(tidNode2);
        }
	nodeList.add(proomtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultiCoordinateRoomType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoomType proomtypeNode1;
        {
            // Block
        PAstMultiCoordinate pastmulticoordinateNode2;
        pastmulticoordinateNode2 = (PAstMultiCoordinate)nodeArrayList2.get(0);

        proomtypeNode1 = new AAddToRoomMultiCoordinateRoomType(pastmulticoordinateNode2);
        }
	nodeList.add(proomtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAmulticoordinate1MultiCoordinate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiCoordinate pastmulticoordinateNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList1.get(0);

        pastmulticoordinateNode1 = new AAstMultiCoordinate(pastcoordinateNode2, null);
        }
	nodeList.add(pastmulticoordinateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAmulticoordinate2MultiCoordinate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiCoordinate pastmulticoordinateNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        PAstMultiCoordinate pastmulticoordinateNode3;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList1.get(0);
        pastmulticoordinateNode3 = (PAstMultiCoordinate)nodeArrayList2.get(0);

        pastmulticoordinateNode1 = new AAstMultiCoordinate(pastcoordinateNode2, pastmulticoordinateNode3);
        }
	nodeList.add(pastmulticoordinateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAcoorlistcoordinatelist1CoordinateList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiCoordinate pastmulticoordinateNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList2.get(0);

        pastmulticoordinateNode1 = new AAstMultiCoordinate(pastcoordinateNode2, null);
        }
	nodeList.add(pastmulticoordinateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAcoorlistcoordinatelist2CoordinateList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstMultiCoordinate pastmulticoordinateNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        PAstMultiCoordinate pastmulticoordinateNode3;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList2.get(0);
        pastmulticoordinateNode3 = (PAstMultiCoordinate)nodeArrayList3.get(0);

        pastmulticoordinateNode1 = new AAstMultiCoordinate(pastcoordinateNode2, pastmulticoordinateNode3);
        }
	nodeList.add(pastmulticoordinateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce APointToMultiPointAddShapeGeneric */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList2.get(0);

        ptypelistNode1 = new AAddPointsToShapeTypeList(pastmultiidNode2);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AShapeToMultiShapeAddShapeGeneric */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList2.get(0);

        ptypelistNode1 = new AAddShapesToShapeTypeList(pastmultiidNode2);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMultiTemplateAddShapeGeneric */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PAstMultiId pastmultiidNode2;
        pastmultiidNode2 = (PAstMultiId)nodeArrayList2.get(0);

        ptypelistNode1 = new AAddTemplateToShapeTypeList(pastmultiidNode2);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMultiCoordinateAddShapeGeneric */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PAstMultiCoordinate pastmulticoordinateNode2;
        pastmulticoordinateNode2 = (PAstMultiCoordinate)nodeArrayList2.get(0);

        ptypelistNode1 = new AAddCoordinateToShapeTypeList(pastmulticoordinateNode2);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ADoorwayAddOpening */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PAstPosition pastpositionNode3;
        TInt tintNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        pastpositionNode3 = (PAstPosition)nodeArrayList4.get(0);
        tintNode4 = (TInt)nodeArrayList7.get(0);

        pprogramstartNode1 = new AAddDoorwayPositionProgramStart(tidNode2, pastpositionNode3, tintNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AWindowAddOpening */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PAstPosition pastpositionNode3;
        TInt tintNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        pastpositionNode3 = (PAstPosition)nodeArrayList4.get(0);
        tintNode4 = (TInt)nodeArrayList7.get(0);

        pprogramstartNode1 = new AAddWindowPositionProgramStart(tidNode2, pastpositionNode3, tintNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExitAddOpening */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramStart pprogramstartNode1;
        {
            // Block
        TId tidNode2;
        PAstPosition pastpositionNode3;
        TInt tintNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        pastpositionNode3 = (PAstPosition)nodeArrayList4.get(0);
        tintNode4 = (TInt)nodeArrayList7.get(0);

        pprogramstartNode1 = new AAddExitPositionProgramStart(tidNode2, pastpositionNode3, tintNode4);
        }
	nodeList.add(pprogramstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ADistancePosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstPosition pastpositionNode1;
        {
            // Block
        PAstDis pastdisNode2;
        TId tidNode3;
        TId tidNode4;
        pastdisNode2 = (PAstDis)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList4.get(0);

        pastpositionNode1 = new ADistanceAstPosition(pastdisNode2, tidNode3, tidNode4);
        }
	nodeList.add(pastpositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACoordinatePosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstPosition pastpositionNode1;
        {
            // Block
        PAstCoordinate pastcoordinateNode2;
        pastcoordinateNode2 = (PAstCoordinate)nodeArrayList1.get(0);

        pastpositionNode1 = new ACoordinateAstPosition(pastcoordinateNode2);
        }
	nodeList.add(pastpositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AStartDistance */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDis pastdisNode1;
        {
            // Block
        TStart tstartNode2;
        tstartNode2 = (TStart)nodeArrayList1.get(0);

        pastdisNode1 = new AStartAstDis(tstartNode2);
        }
	nodeList.add(pastdisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANearStartDistance */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDis pastdisNode1;
        {
            // Block
        TNearstart tnearstartNode2;
        tnearstartNode2 = (TNearstart)nodeArrayList1.get(0);

        pastdisNode1 = new ANearStartAstDis(tnearstartNode2);
        }
	nodeList.add(pastdisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AHalfwayDistance */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDis pastdisNode1;
        {
            // Block
        THalfway thalfwayNode2;
        thalfwayNode2 = (THalfway)nodeArrayList1.get(0);

        pastdisNode1 = new AHalfwayAstDis(thalfwayNode2);
        }
	nodeList.add(pastdisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANearEndDistance */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDis pastdisNode1;
        {
            // Block
        TNearend tnearendNode2;
        tnearendNode2 = (TNearend)nodeArrayList1.get(0);

        pastdisNode1 = new ANearEndAstDis(tnearendNode2);
        }
	nodeList.add(pastdisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEndDistance */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDis pastdisNode1;
        {
            // Block
        TEnd tendNode2;
        tendNode2 = (TEnd)nodeArrayList1.get(0);

        pastdisNode1 = new AEndAstDis(tendNode2);
        }
	nodeList.add(pastdisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACoordinate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstCoordinate pastcoordinateNode1;
        {
            // Block
        TFloat tfloatNode2;
        TFloat tfloatNode3;
        tfloatNode2 = (TFloat)nodeArrayList2.get(0);
        tfloatNode3 = (TFloat)nodeArrayList4.get(0);

        pastcoordinateNode1 = new AAstCoordinate(tfloatNode2, tfloatNode3);
        }
	nodeList.add(pastcoordinateNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 3}, {10, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, ERROR, 1}, {11, SHIFT, 5}, {12, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {28, SHIFT, 9}, },
			{{-1, ERROR, 2}, {26, SHIFT, 11}, {28, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 3}, {14, SHIFT, 15}, {37, SHIFT, 16}, {38, SHIFT, 17}, {39, SHIFT, 18}, },
			{{-1, ERROR, 4}, {47, ACCEPT, -1}, },
			{{-1, ERROR, 5}, {7, SHIFT, 21}, },
			{{-1, ERROR, 6}, {7, SHIFT, 23}, {8, SHIFT, 24}, },
			{{-1, ERROR, 7}, {31, SHIFT, 26}, },
			{{-1, ERROR, 8}, {7, SHIFT, 28}, },
			{{-1, ERROR, 9}, {29, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, },
			{{-1, ERROR, 10}, {6, SHIFT, 34}, },
			{{-1, ERROR, 11}, {8, SHIFT, 35}, },
			{{-1, ERROR, 12}, {8, SHIFT, 37}, },
			{{-1, ERROR, 13}, {8, SHIFT, 39}, },
			{{-1, ERROR, 14}, {6, SHIFT, 41}, },
			{{-1, ERROR, 15}, {25, SHIFT, 42}, {26, SHIFT, 43}, {28, SHIFT, 44}, },
			{{-1, ERROR, 16}, {14, SHIFT, 46}, },
			{{-1, ERROR, 17}, {14, SHIFT, 47}, },
			{{-1, ERROR, 18}, {14, SHIFT, 48}, },
			{{-1, ERROR, 19}, {6, SHIFT, 49}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 21}, {46, SHIFT, 50}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 23}, {46, SHIFT, 51}, },
			{{-1, ERROR, 24}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 26}, {46, SHIFT, 57}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 28}, {46, SHIFT, 58}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 30}, {8, SHIFT, 59}, },
			{{-1, ERROR, 31}, {8, SHIFT, 60}, },
			{{-1, ERROR, 32}, {8, SHIFT, 61}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 3}, {10, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, ERROR, 35}, {46, SHIFT, 63}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 37}, {4, SHIFT, 64}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 39}, {4, SHIFT, 65}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 3}, {10, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, ERROR, 42}, {46, SHIFT, 67}, },
			{{-1, ERROR, 43}, {46, SHIFT, 69}, },
			{{-1, ERROR, 44}, {46, SHIFT, 71}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 46}, {46, SHIFT, 73}, },
			{{-1, ERROR, 47}, {46, SHIFT, 74}, },
			{{-1, ERROR, 48}, {46, SHIFT, 75}, },
			{{-1, REDUCE, 3}, {10, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 52}, {22, SHIFT, 77}, },
			{{-1, ERROR, 53}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, },
			{{-1, ERROR, 54}, {7, SHIFT, 83}, },
			{{-1, ERROR, 55}, {13, SHIFT, 84}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 57}, {8, SHIFT, 86}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 59}, {13, SHIFT, 87}, },
			{{-1, ERROR, 60}, {13, SHIFT, 88}, {22, SHIFT, 89}, },
			{{-1, ERROR, 61}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 63}, {8, SHIFT, 93}, },
			{{-1, ERROR, 64}, {46, SHIFT, 94}, },
			{{-1, ERROR, 65}, {46, SHIFT, 94}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 67}, {8, SHIFT, 97}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 69}, {8, SHIFT, 98}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 71}, {8, SHIFT, 99}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 73}, {4, SHIFT, 52}, {40, SHIFT, 100}, {41, SHIFT, 101}, {42, SHIFT, 102}, {43, SHIFT, 103}, {44, SHIFT, 104}, },
			{{-1, ERROR, 74}, {4, SHIFT, 52}, {40, SHIFT, 100}, {41, SHIFT, 101}, {42, SHIFT, 102}, {43, SHIFT, 103}, {44, SHIFT, 104}, },
			{{-1, ERROR, 75}, {4, SHIFT, 52}, {40, SHIFT, 100}, {41, SHIFT, 101}, {42, SHIFT, 102}, {43, SHIFT, 103}, {44, SHIFT, 104}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 77}, {8, SHIFT, 110}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 22}, {21, SHIFT, 111}, },
			{{-1, ERROR, 83}, {46, SHIFT, 113}, },
			{{-1, ERROR, 84}, {46, SHIFT, 114}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 86}, {32, SHIFT, 115}, },
			{{-1, ERROR, 87}, {4, SHIFT, 52}, },
			{{-1, ERROR, 88}, {46, SHIFT, 117}, },
			{{-1, ERROR, 89}, {16, SHIFT, 118}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 91}, {15, SHIFT, 119}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 93}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 123}, },
			{{-1, ERROR, 95}, {5, SHIFT, 125}, },
			{{-1, ERROR, 96}, {5, SHIFT, 126}, },
			{{-1, ERROR, 97}, {26, SHIFT, 127}, {30, SHIFT, 128}, {35, SHIFT, 129}, {36, SHIFT, 130}, },
			{{-1, ERROR, 98}, {27, SHIFT, 132}, {30, SHIFT, 133}, {35, SHIFT, 134}, {36, SHIFT, 135}, },
			{{-1, ERROR, 99}, {27, SHIFT, 132}, {30, SHIFT, 133}, {35, SHIFT, 134}, {36, SHIFT, 135}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 105}, {8, SHIFT, 138}, },
			{{-1, ERROR, 106}, {46, SHIFT, 139}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 108}, {8, SHIFT, 140}, },
			{{-1, ERROR, 109}, {8, SHIFT, 141}, },
			{{-1, ERROR, 110}, {22, SHIFT, 142}, },
			{{-1, ERROR, 111}, {22, SHIFT, 143}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 115}, {9, SHIFT, 144}, },
			{{-1, ERROR, 116}, {14, SHIFT, 145}, },
			{{-1, ERROR, 117}, {14, SHIFT, 146}, },
			{{-1, ERROR, 118}, {22, SHIFT, 147}, },
			{{-1, ERROR, 119}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, ERROR, 120}, {7, SHIFT, 149}, },
			{{-1, REDUCE, 20}, {13, SHIFT, 84}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 123}, {46, SHIFT, 151}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 125}, {8, SHIFT, 152}, },
			{{-1, ERROR, 126}, {8, SHIFT, 153}, },
			{{-1, ERROR, 127}, {46, SHIFT, 154}, },
			{{-1, ERROR, 128}, {4, SHIFT, 52}, },
			{{-1, ERROR, 129}, {46, SHIFT, 94}, },
			{{-1, ERROR, 130}, {46, SHIFT, 94}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 132}, {46, SHIFT, 94}, },
			{{-1, ERROR, 133}, {4, SHIFT, 52}, },
			{{-1, ERROR, 134}, {46, SHIFT, 94}, },
			{{-1, ERROR, 135}, {46, SHIFT, 94}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 138}, {32, SHIFT, 163}, },
			{{-1, ERROR, 139}, {8, SHIFT, 164}, },
			{{-1, ERROR, 140}, {32, SHIFT, 165}, },
			{{-1, ERROR, 141}, {32, SHIFT, 166}, },
			{{-1, ERROR, 142}, {5, SHIFT, 167}, },
			{{-1, ERROR, 143}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, },
			{{-1, ERROR, 144}, {7, SHIFT, 169}, },
			{{-1, ERROR, 145}, {4, SHIFT, 52}, },
			{{-1, ERROR, 146}, {46, SHIFT, 171}, },
			{{-1, ERROR, 147}, {15, SHIFT, 172}, },
			{{-1, ERROR, 148}, {7, SHIFT, 173}, },
			{{-1, ERROR, 149}, {46, SHIFT, 174}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 123}, },
			{{-1, ERROR, 152}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, ERROR, 153}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, {8, SHIFT, 178}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 163}, {9, SHIFT, 180}, },
			{{-1, ERROR, 164}, {46, SHIFT, 181}, },
			{{-1, ERROR, 165}, {9, SHIFT, 182}, },
			{{-1, ERROR, 166}, {9, SHIFT, 183}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 169}, {46, SHIFT, 184}, },
			{{-1, ERROR, 170}, {7, SHIFT, 185}, },
			{{-1, ERROR, 171}, {7, SHIFT, 186}, },
			{{-1, ERROR, 172}, {4, SHIFT, 52}, {22, SHIFT, 53}, },
			{{-1, ERROR, 173}, {46, SHIFT, 188}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 176}, {7, SHIFT, 189}, },
			{{-1, ERROR, 177}, {7, SHIFT, 190}, },
			{{-1, ERROR, 178}, {4, SHIFT, 52}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 185}, {46, SHIFT, 192}, },
			{{-1, ERROR, 186}, {46, SHIFT, 193}, },
			{{-1, ERROR, 187}, {7, SHIFT, 194}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 189}, {46, SHIFT, 94}, },
			{{-1, ERROR, 190}, {46, SHIFT, 94}, },
			{{-1, REDUCE, 57}, {8, SHIFT, 178}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 194}, {46, SHIFT, 198}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 30}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, {34, 62}, {41, 66}, {49, 76}, },
			{{-1, 10}, },
			{{-1, 22}, },
			{{-1, 25}, },
			{{-1, 27}, },
			{{-1, 29}, },
			{{-1, 33}, },
			{{-1, 54}, {119, 148}, {172, 187}, },
			{{-1, 120}, {152, 176}, {153, 177}, },
			{{-1, 121}, {24, 55}, {119, 55}, {172, 55}, },
			{{-1, 112}, },
			{{-1, 85}, {121, 150}, },
			{{-1, 82}, {143, 168}, },
			{{-1, 90}, },
			{{-1, 92}, },
			{{-1, 14}, },
			{{-1, 40}, },
			{{-1, 95}, {65, 96}, {129, 157}, {130, 158}, {132, 159}, {134, 161}, {135, 162}, {189, 195}, {190, 196}, },
			{{-1, 124}, {151, 175}, },
			{{-1, 38}, },
			{{-1, 36}, },
			{{-1, 19}, },
			{{-1, 45}, },
			{{-1, 72}, },
			{{-1, 70}, },
			{{-1, 68}, },
			{{-1, 131}, },
			{{-1, 155}, {133, 160}, },
			{{-1, 179}, {191, 197}, },
			{{-1, 136}, {99, 137}, },
			{{-1, 20}, },
			{{-1, 105}, {74, 108}, {75, 109}, },
			{{-1, 106}, },
			{{-1, 107}, {24, 56}, {87, 116}, {93, 122}, {119, 56}, {128, 156}, {133, 156}, {145, 170}, {152, 122}, {153, 122}, {172, 56}, {178, 191}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'create', 'copy', 'add', EOF",
			"expecting: 'map', 'point', 'room', 'template', 'shape'",
			"expecting: 'template', 'shape', 'points'",
			"expecting: 'to', 'doorway', 'window', 'exit'",
			"expecting: EOF",
			"expecting: '='",
			"expecting: '=', ','",
			"expecting: 'in'",
			"expecting: 'line', 'rectangle', 'circle'",
			"expecting: ';'",
			"expecting: ','",
			"expecting: 'room', 'template', 'shape'",
			"expecting: 'to'",
			"expecting: id",
			"expecting: '(', float",
			"expecting: '('",
			"expecting: float",
			"expecting: 'right', 'left', 'up', 'down'",
			"expecting: 'from'",
			"expecting: 'from', float",
			"expecting: '(', 'start', 'nearstart', 'halfway', 'nearend', 'end'",
			"expecting: '=', 'from', 'and'",
			"expecting: 'floor'",
			"expecting: 'by'",
			"expecting: 'at'",
			"expecting: ')', ';', ','",
			"expecting: ')'",
			"expecting: 'template', 'coordinates', 'points', 'shapes'",
			"expecting: 'templates', 'coordinates', 'points', 'shapes'",
			"expecting: '=', 'from'",
			"expecting: int",
			"expecting: ')', ';'",
			"expecting: ';', ','",
			"expecting: ';', '=', ',', 'to'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 10, 10, 9, 11, 12, 12, 12, 9, 9, 13, 9, 13, 14, 9, 13, 9, 13, 9, 10, 10, 10, 9, 0, 13, 9, 15, 9, 15, 9, 0, 13, 13, 13, 9, 13, 13, 13, 0, 9, 9, 16, 17, 5, 18, 5, 10, 9, 18, 19, 16, 4, 10, 13, 13, 4, 10, 9, 10, 9, 10, 9, 20, 20, 20, 4, 10, 21, 21, 21, 21, 21, 13, 13, 5, 22, 15, 13, 23, 9, 24, 9, 14, 25, 26, 26, 27, 28, 28, 13, 13, 13, 13, 13, 10, 13, 10, 10, 10, 16, 16, 29, 9, 5, 30, 12, 12, 16, 14, 5, 29, 5, 13, 31, 10, 10, 13, 15, 13, 13, 9, 13, 15, 13, 13, 9, 9, 22, 10, 22, 22, 26, 17, 5, 15, 13, 24, 5, 13, 5, 25, 14, 14, 9, 9, 32, 9, 9, 9, 9, 9, 9, 30, 13, 30, 30, 33, 29, 13, 5, 5, 14, 13, 9, 31, 5, 5, 15, 9, 9, 10, 9, 9, 9, 13, 13, 5, 9, 13, 13, 32, 9, 9, 13, 9, 9, 9, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
