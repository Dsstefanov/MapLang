/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class AAstPreciseDir extends PAstPreciseDir
{
    private TFloat _float_;
    private PAstDir _astDir_;
    private PAstSecondPreciseDir _astSecondPreciseDir_;

    public AAstPreciseDir()
    {
        // Constructor
    }

    public AAstPreciseDir(
        @SuppressWarnings("hiding") TFloat _float_,
        @SuppressWarnings("hiding") PAstDir _astDir_,
        @SuppressWarnings("hiding") PAstSecondPreciseDir _astSecondPreciseDir_)
    {
        // Constructor
        setFloat(_float_);

        setAstDir(_astDir_);

        setAstSecondPreciseDir(_astSecondPreciseDir_);

    }

    @Override
    public Object clone()
    {
        return new AAstPreciseDir(
            cloneNode(this._float_),
            cloneNode(this._astDir_),
            cloneNode(this._astSecondPreciseDir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAstPreciseDir(this);
    }

    public TFloat getFloat()
    {
        return this._float_;
    }

    public void setFloat(TFloat node)
    {
        if(this._float_ != null)
        {
            this._float_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._float_ = node;
    }

    public PAstDir getAstDir()
    {
        return this._astDir_;
    }

    public void setAstDir(PAstDir node)
    {
        if(this._astDir_ != null)
        {
            this._astDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astDir_ = node;
    }

    public PAstSecondPreciseDir getAstSecondPreciseDir()
    {
        return this._astSecondPreciseDir_;
    }

    public void setAstSecondPreciseDir(PAstSecondPreciseDir node)
    {
        if(this._astSecondPreciseDir_ != null)
        {
            this._astSecondPreciseDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astSecondPreciseDir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._float_)
            + toString(this._astDir_)
            + toString(this._astSecondPreciseDir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._float_ == child)
        {
            this._float_ = null;
            return;
        }

        if(this._astDir_ == child)
        {
            this._astDir_ = null;
            return;
        }

        if(this._astSecondPreciseDir_ == child)
        {
            this._astSecondPreciseDir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._float_ == oldChild)
        {
            setFloat((TFloat) newChild);
            return;
        }

        if(this._astDir_ == oldChild)
        {
            setAstDir((PAstDir) newChild);
            return;
        }

        if(this._astSecondPreciseDir_ == oldChild)
        {
            setAstSecondPreciseDir((PAstSecondPreciseDir) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
