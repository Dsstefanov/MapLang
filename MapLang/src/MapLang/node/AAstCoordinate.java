/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class AAstCoordinate extends PAstCoordinate
{
    private TFloat _x_;
    private TFloat _y_;

    public AAstCoordinate()
    {
        // Constructor
    }

    public AAstCoordinate(
        @SuppressWarnings("hiding") TFloat _x_,
        @SuppressWarnings("hiding") TFloat _y_)
    {
        // Constructor
        setX(_x_);

        setY(_y_);

    }

    @Override
    public Object clone()
    {
        return new AAstCoordinate(
            cloneNode(this._x_),
            cloneNode(this._y_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAstCoordinate(this);
    }

    public TFloat getX()
    {
        return this._x_;
    }

    public void setX(TFloat node)
    {
        if(this._x_ != null)
        {
            this._x_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._x_ = node;
    }

    public TFloat getY()
    {
        return this._y_;
    }

    public void setY(TFloat node)
    {
        if(this._y_ != null)
        {
            this._y_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._y_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._x_)
            + toString(this._y_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._x_ == child)
        {
            this._x_ = null;
            return;
        }

        if(this._y_ == child)
        {
            this._y_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._x_ == oldChild)
        {
            setX((TFloat) newChild);
            return;
        }

        if(this._y_ == oldChild)
        {
            setY((TFloat) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
