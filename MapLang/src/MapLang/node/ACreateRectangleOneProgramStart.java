/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class ACreateRectangleOneProgramStart extends PProgramStart
{
    private TFloat _width_;
    private TFloat _height_;
    private PAstRelation _astRelation_;
    private TId _id_;

    public ACreateRectangleOneProgramStart()
    {
        // Constructor
    }

    public ACreateRectangleOneProgramStart(
        @SuppressWarnings("hiding") TFloat _width_,
        @SuppressWarnings("hiding") TFloat _height_,
        @SuppressWarnings("hiding") PAstRelation _astRelation_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setWidth(_width_);

        setHeight(_height_);

        setAstRelation(_astRelation_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new ACreateRectangleOneProgramStart(
            cloneNode(this._width_),
            cloneNode(this._height_),
            cloneNode(this._astRelation_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACreateRectangleOneProgramStart(this);
    }

    public TFloat getWidth()
    {
        return this._width_;
    }

    public void setWidth(TFloat node)
    {
        if(this._width_ != null)
        {
            this._width_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._width_ = node;
    }

    public TFloat getHeight()
    {
        return this._height_;
    }

    public void setHeight(TFloat node)
    {
        if(this._height_ != null)
        {
            this._height_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._height_ = node;
    }

    public PAstRelation getAstRelation()
    {
        return this._astRelation_;
    }

    public void setAstRelation(PAstRelation node)
    {
        if(this._astRelation_ != null)
        {
            this._astRelation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astRelation_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._width_)
            + toString(this._height_)
            + toString(this._astRelation_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._width_ == child)
        {
            this._width_ = null;
            return;
        }

        if(this._height_ == child)
        {
            this._height_ = null;
            return;
        }

        if(this._astRelation_ == child)
        {
            this._astRelation_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._width_ == oldChild)
        {
            setWidth((TFloat) newChild);
            return;
        }

        if(this._height_ == oldChild)
        {
            setHeight((TFloat) newChild);
            return;
        }

        if(this._astRelation_ == oldChild)
        {
            setAstRelation((PAstRelation) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
