/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class ACreateRectangleTwoProgramStart extends PProgramStart
{
    private TId _left1_;
    private TId _left2_;
    private TId _right_;

    public ACreateRectangleTwoProgramStart()
    {
        // Constructor
    }

    public ACreateRectangleTwoProgramStart(
        @SuppressWarnings("hiding") TId _left1_,
        @SuppressWarnings("hiding") TId _left2_,
        @SuppressWarnings("hiding") TId _right_)
    {
        // Constructor
        setLeft1(_left1_);

        setLeft2(_left2_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new ACreateRectangleTwoProgramStart(
            cloneNode(this._left1_),
            cloneNode(this._left2_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACreateRectangleTwoProgramStart(this);
    }

    public TId getLeft1()
    {
        return this._left1_;
    }

    public void setLeft1(TId node)
    {
        if(this._left1_ != null)
        {
            this._left1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left1_ = node;
    }

    public TId getLeft2()
    {
        return this._left2_;
    }

    public void setLeft2(TId node)
    {
        if(this._left2_ != null)
        {
            this._left2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left2_ = node;
    }

    public TId getRight()
    {
        return this._right_;
    }

    public void setRight(TId node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left1_)
            + toString(this._left2_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left1_ == child)
        {
            this._left1_ = null;
            return;
        }

        if(this._left2_ == child)
        {
            this._left2_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left1_ == oldChild)
        {
            setLeft1((TId) newChild);
            return;
        }

        if(this._left2_ == oldChild)
        {
            setLeft2((TId) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
