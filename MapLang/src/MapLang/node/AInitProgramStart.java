/* This file was generated by SableCC (http://www.sablecc.org/). */

package MapLang.node;

import MapLang.analysis.*;

@SuppressWarnings("nls")
public final class AInitProgramStart extends PProgramStart
{
    private PProgramStart _statementOne_;
    private PProgramStart _statementTwo_;

    public AInitProgramStart()
    {
        // Constructor
    }

    public AInitProgramStart(
        @SuppressWarnings("hiding") PProgramStart _statementOne_,
        @SuppressWarnings("hiding") PProgramStart _statementTwo_)
    {
        // Constructor
        setStatementOne(_statementOne_);

        setStatementTwo(_statementTwo_);

    }

    @Override
    public Object clone()
    {
        return new AInitProgramStart(
            cloneNode(this._statementOne_),
            cloneNode(this._statementTwo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInitProgramStart(this);
    }

    public PProgramStart getStatementOne()
    {
        return this._statementOne_;
    }

    public void setStatementOne(PProgramStart node)
    {
        if(this._statementOne_ != null)
        {
            this._statementOne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementOne_ = node;
    }

    public PProgramStart getStatementTwo()
    {
        return this._statementTwo_;
    }

    public void setStatementTwo(PProgramStart node)
    {
        if(this._statementTwo_ != null)
        {
            this._statementTwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementTwo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._statementOne_)
            + toString(this._statementTwo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._statementOne_ == child)
        {
            this._statementOne_ = null;
            return;
        }

        if(this._statementTwo_ == child)
        {
            this._statementTwo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._statementOne_ == oldChild)
        {
            setStatementOne((PProgramStart) newChild);
            return;
        }

        if(this._statementTwo_ == oldChild)
        {
            setStatementTwo((PProgramStart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
